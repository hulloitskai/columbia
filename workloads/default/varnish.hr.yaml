---

apiVersion: flux.weave.works/v1beta1
kind: HelmRelease

metadata:
  name: varnish
  namespace: default
  annotations:
    flux.weave.works/automated: "false"
    flux.weave.works/tag.chart-image: "semver:~6"
  labels:
    app.kubernetes.io/name: varnish

spec:
  releaseName: varnish
  chart:
    repository: https://charts.stevenxie.me
    name: varnish
    version: 0.2.1
  values:
    config:
      data: |-
        vcl 4.0;

        # Backends:
        backend api {
          .host = "api";
          .port = "80";
        }

        sub vcl_backend_response {
          set beresp.ttl = 120s;
          set beresp.http.X-Service = beresp.backend.name;

          if (beresp.backend.name == "api") {
            if (bereq.url == "/" || bereq.url == "/nowplaying") {
              set beresp.ttl = 1s;
            }
            if (bereq.url == "/nowplaying") {
              set beresp.grace = 0s; # disable grace mode
            }
          }
        }

        sub vcl_recv {
          unset req.http.X-Body-Len;

          # Determine backend.
          if (req.http.Host == "api.stevenxie.me") {
            set req.backend_hint = api;
          }

          # Remove has_js and Cloudflare/Google Analytics __* cookies, and
          # normalize cookies.
          set req.http.Cookie = regsuball(req.http.Cookie,
            "(^|;\s*)(_[_a-z]+|has_js)=[^;]*", "");
          set req.http.Cookie = regsub(req.http.Cookie, "^;\s*", "");
          if (req.http.Cookie ~ "^ *$") {
            unset req.http.Cookie;
          }

          if (req.method != "GET" && req.method != "HEAD") {
            return (pass);
          }
          if (req.http.Authorization) {
            return (pass);
          }
          if (req.http.X-Force-Backend) {
            return (pass);
          }
        }

        sub vcl_deliver {
          unset resp.http.Via;
          return (deliver);
        }

    image:
      repository: cooptilleuls/varnish
      tag: 6.2.0-alpine

    resources:
      requests:
        cpu: 0
        memory: 100Mi
      limits:
        cpu: 200m
        memory: 200Mi

    deployment:
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxSurge: 1
          maxUnavailable: 0
